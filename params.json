{"name":"Kosenconf-054nara","body":"# ものづくりとこうせん！\r\nこれは、5/12に奈良女子大学で開催された[高専カンファレンスin奈良2](http://kosenconf.jp/?054nara)の発表資料のテクニカルなフォローアップです。\r\n\r\n全体の感想などは[高専カンファレンスin奈良2の感想とフォローアップ](http://b-jigsaw.tumblr.com/kosenconf-054nara)に書きました。\r\n\r\n## 動作環境\r\n* node.js v0.6.15\r\n* (npm 1.1.16)\r\n* express 2.5.9\r\n* jade 0.25.0\r\n* socket.io 0.9.6\r\n* twitter 0.1.18\r\n\r\n## 動作方法\r\n1. cloneするかzipをDL\r\n2. 必要なパッケージをnpmから(package.jsonを書いておいた方がいいのかな？)(```npm install express jade socket.io twitter```)\r\n3. TwitterのでApplicationつくって```Consumerkey, Consumersecret, Accesstoken, Accesstokensecret```を```app.js```に書き換え\r\n3. 実行(```node app.js```)\r\n4. ブラウザで(Chromeがオススメです)```localhost:3000```にアクセス\r\n5. →キーで次のシーンへ、会場参加型機能部分は2のアカウントにDMを送るとカウントされる\r\n\r\n## 解説\r\nexpressにひな形生成機構があるのでそれを使ってひな形を作って、それを適当に書き加えていくスタイルで作っていきました。\r\n\r\n```\r\nexpress -t jade\r\n```\r\n\r\nしましょう。jadeはテンプレートエンジンなので、好みで変えてもいいとおもいます。(ejsとか)\r\n\r\n今回はめんどくさかったので```index.jade```を空にして```layout.jade```にhtmlを書いていきました。\r\n\r\n```/```にアクセスすると、ページを出力してTwitterからStreaming APIを読み込んできてWebsocketでブラウザ側に渡します。\r\n\r\n```javascript\r\ntw.stream('user', {}, function(s) { // twitterからuserstreamを読んで\r\n    s.on('data', function(d){\r\n      if(d.direct_message !== undefined) { // DMがきたら\r\n        var m = { // messageをつくる\r\n          type: 'DM',\r\n          body: d.direct_message.text\r\n        };\r\n        console.log(d.direct_message);\r\n        io.sockets.emit('message', JSON.stringify(m)); // Websocketにemitする\r\n      }\r\n    });\r\n    s.on('end', function(res){\r\n      console.log(res);\r\n    });\r\n    s.on('destroy', function(res){\r\n      console.log(res);\r\n    });\r\n  });\r\n```\r\n\r\nこの部分で会場参加型機能の部分を実装しています。同様に、\r\n\r\n```javascript\r\ntw.stream('statuses/filter', {'track':'kosenconf'}, function(s){ // kosenconfの含まれてるtweetのstream\r\n    s.on('data', function(d){\r\n      var m = { // messageをつくる\r\n        type: 'tw',\r\n        body: d.text,\r\n        user: {\r\n          name: d.user.screen_name,\r\n          image: d.user.profile_image_url\r\n        }\r\n      };\r\n      io.sockets.emit('message', JSON.stringify(m)); // Websocketにemit\r\n    });\r\n    s.on('end', function(res){\r\n      console.log(res);\r\n    });\r\n    s.on('destroy', function(res){\r\n      console.log(res);\r\n    });\r\n  });\r\n```\r\n\r\nこの部分でTweetが流れる部分を実装しています。\r\n\r\nクライアント側```/public/javascripts/main.js```では\r\n\r\n```javascript\r\ns.on('message', function(d){ // messageが送られてきたら\r\n  connect = true;\r\n  var m = JSON.parse(d); // JSONで送っているのでパースして\r\n  if(m.type === 'tw') { // tweetだったら\r\n    $('body').append($('<div />', { // tweetを画面に追加して\r\n    class: 'tweet',\r\n    css: {\r\n      top: displayLiner.returnCounter(),\r\n      left: $(window).width(),\r\n    }\r\n    }).append($('<img />', {\r\n      class: 'userImage',\r\n      src: m.user.image\r\n    })).append($('<p />', {\r\n      class: 'userName',\r\n      html: m.user.name\r\n    })).append($('<p />', {\r\n      class: 'tweetBody',\r\n      html: m.body\r\n    })).animate({ // アニメーションで流す\r\n      left: -($(window).width()*2)\r\n    }, 12000, 'linear', function(){\r\n      $(this).remove();\r\n    }));\r\n  } else if(m.type === 'DM') { // DMなら\r\n    var re = new RegExp('[1-'+choice.max+']'); // 適当に正規表現かけて\r\n    if(m.body.match(re)) {\r\n      var num = parseInt(m.body);\r\n      choice.ary[num] += 1; // 当該の番号を増やす\r\n      $('.choice:eq('+(num-1)+') > .count').html(choice.ary[num]);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n識者の方に伺いたいのですが、Tweetを追加するあたりで```append()```をネストしまくってるんですがもっと上手い方法ないのでしょうか。出来ればjadeっぽく書きたいです。\r\n\r\nこんな感じでJavascriptが軽く書けるとこれぐらいのプログラムをすぐ作れるので便利です。\r\n\r\nこれまでは、クライアント側だけの処理でよかったのでクライアント側のjsにプロットをベタ書きしていたのですが今回はサーバ側にシーン毎のデータを作って、それをjsonにしてクライアントに渡す、というようなことをしています。\r\n\r\nあとは特筆すべき点はないとおもいます、たぶん。\r\n\r\nうまいことライブラリみたいな感じにして公開してみたいなあ、ってぼんやりと考えています。\r\n\r\nもしなにかあれば[@neo6120](http://twitter.com/neo6120)まで。","tagline":"kosenconf-054nara slides by jigsaw","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}